Terminals unused in grammar

    TK_PR_THEN
    TK_PR_FOREACH
    TK_PR_SWITCH
    TK_PR_CASE
    TK_PR_CLASS
    TK_PR_PRIVATE
    TK_PR_PUBLIC
    TK_PR_PROTECTED
    TK_PR_END
    TK_PR_DEFAULT
    TK_OC_FORWARD_PIPE
    TK_OC_BASH_PIPE
    TOKEN_ERRO


Grammar

    0 $accept: programa $end

    1 programa: program_list

    2 program_list: global_var program_list
    3             | func_definition program_list
    4             | %empty

    5 maybe_const: %empty
    6            | TK_PR_CONST

    7 maybe_static: %empty
    8             | TK_PR_STATIC

    9 maybe_vector: %empty
   10             | '[' expression ']'

   11 var: TK_IDENTIFICADOR '[' TK_LIT_INT ']'
   12    | TK_IDENTIFICADOR

   13 type: TK_PR_INT
   14     | TK_PR_FLOAT
   15     | TK_PR_CHAR
   16     | TK_PR_BOOL
   17     | TK_PR_STRING

   18 literal: TK_LIT_INT
   19        | TK_LIT_FLOAT
   20        | TK_LIT_FALSE
   21        | TK_LIT_TRUE
   22        | TK_LIT_CHAR
   23        | TK_LIT_STRING

   24 global_var: maybe_static type global_var_list ';'

   25 global_var_list: var ',' global_var_list
   26                | var

   27 func_definition: func_header command_block

   28 func_header: maybe_static type TK_IDENTIFICADOR '(' func_header_list ')'

   29 func_header_list: %empty
   30                 | maybe_const type TK_IDENTIFICADOR func_header_list_iterator

   31 func_header_list_iterator: ',' maybe_const type TK_IDENTIFICADOR func_header_list_iterator
   32                          | %empty

   33 simple_command: command_block
   34               | local_var_declaration
   35               | attribution_command
   36               | io_command
   37               | call_func_command
   38               | shift_command
   39               | return_command
   40               | flux_control_command

   41 command_block: '{' sequence_simple_command '}'

   42 sequence_simple_command: simple_command ';' sequence_simple_command
   43                        | %empty

   44 local_var_declaration: maybe_static maybe_const type TK_IDENTIFICADOR local_var_atribution

   45 local_var_atribution: %empty
   46                     | TK_OC_LE literal
   47                     | TK_OC_LE TK_IDENTIFICADOR

   48 attribution_command: TK_IDENTIFICADOR maybe_vector '=' expression

   49 io_command: TK_PR_INPUT TK_IDENTIFICADOR
   50           | TK_PR_OUTPUT id_or_literal

   51 id_or_literal: TK_IDENTIFICADOR
   52              | literal

   53 call_func_command: TK_IDENTIFICADOR '(' func_parameters_list ')'
   54                  | TK_IDENTIFICADOR '(' ')'

   55 func_parameters_list: expression
   56                     | func_parameters_list ',' expression

   57 shift_command: TK_IDENTIFICADOR maybe_vector shift_operators TK_LIT_INT

   58 shift_operators: TK_OC_SL
   59                | TK_OC_SR

   60 return_command: TK_PR_RETURN expression
   61               | TK_PR_BREAK
   62               | TK_PR_CONTINUE

   63 flux_control_command: conditional_flux_control
   64                     | for_flux_control
   65                     | while_flux_control

   66 conditional_flux_control: TK_PR_IF '(' expression ')' command_block maybe_else

   67 maybe_else: TK_PR_ELSE command_block
   68           | %empty

   69 for_flux_control: TK_PR_FOR '(' attribution_command ':' expression ':' attribution_command ')' command_block ';'

   70 while_flux_control: TK_PR_WHILE '(' expression ')' TK_PR_DO command_block ';'

   71 expression: expression TK_OC_OR exp_log_or
   72           | exp_log_or

   73 exp_log_or: exp_log_or TK_OC_AND exp_log_and
   74           | exp_log_and

   75 exp_log_and: exp_log_and '|' exp_bit_or
   76            | exp_bit_or

   77 exp_bit_or: exp_bit_or '&' exp_bit_and
   78           | exp_bit_and

   79 exp_bit_and: exp_bit_and TK_OC_EQ exp_relat
   80            | exp_bit_and TK_OC_NE exp_relat
   81            | exp_relat

   82 exp_relat: exp_relat TK_OC_LE exp_sum
   83          | exp_relat TK_OC_GE exp_sum
   84          | exp_relat '<' exp_sum
   85          | exp_relat '>' exp_sum
   86          | exp_sum

   87 exp_sum: exp_sum '+' exp_mult
   88        | exp_sum '-' exp_mult
   89        | exp_mult

   90 exp_mult: exp_mult '*' exp_pow
   91         | exp_mult '/' exp_pow
   92         | exp_mult '%' exp_pow
   93         | exp_pow

   94 exp_pow: exp_pow '^' unary_exp
   95        | unary_exp

   96 unary_exp: unary_op unary_exp
   97          | operand

   98 unary_op: '+'
   99         | '-'
  100         | '!'
  101         | '&'
  102         | '*'
  103         | '?'
  104         | '#'

  105 operand: TK_IDENTIFICADOR maybe_vector
  106        | literal
  107        | call_func_command
  108        | '(' expression ')'


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 100
    '#' (35) 104
    '%' (37) 92
    '&' (38) 77 101
    '(' (40) 28 53 54 66 69 70 108
    ')' (41) 28 53 54 66 69 70 108
    '*' (42) 90 102
    '+' (43) 87 98
    ',' (44) 25 31 56
    '-' (45) 88 99
    '/' (47) 91
    ':' (58) 69
    ';' (59) 24 42 69 70
    '<' (60) 84
    '=' (61) 48
    '>' (62) 85
    '?' (63) 103
    '[' (91) 10 11
    ']' (93) 10 11
    '^' (94) 94
    '{' (123) 41
    '|' (124) 75
    '}' (125) 41
    error (256)
    TK_PR_INT (258) 13
    TK_PR_FLOAT (259) 14
    TK_PR_BOOL (260) 16
    TK_PR_CHAR (261) 15
    TK_PR_STRING (262) 17
    TK_PR_IF (263) 66
    TK_PR_THEN (264)
    TK_PR_ELSE (265) 67
    TK_PR_WHILE (266) 70
    TK_PR_DO (267) 70
    TK_PR_INPUT (268) 49
    TK_PR_OUTPUT (269) 50
    TK_PR_RETURN (270) 60
    TK_PR_CONST (271) 6
    TK_PR_STATIC (272) 8
    TK_PR_FOREACH (273)
    TK_PR_FOR (274) 69
    TK_PR_SWITCH (275)
    TK_PR_CASE (276)
    TK_PR_BREAK (277) 61
    TK_PR_CONTINUE (278) 62
    TK_PR_CLASS (279)
    TK_PR_PRIVATE (280)
    TK_PR_PUBLIC (281)
    TK_PR_PROTECTED (282)
    TK_PR_END (283)
    TK_PR_DEFAULT (284)
    TK_OC_LE (285) 46 47 82
    TK_OC_GE (286) 83
    TK_OC_EQ (287) 79
    TK_OC_NE (288) 80
    TK_OC_AND (289) 73
    TK_OC_OR (290) 71
    TK_OC_SL (291) 58
    TK_OC_SR (292) 59
    TK_OC_FORWARD_PIPE (293)
    TK_OC_BASH_PIPE (294)
    TK_LIT_INT (295) 11 18 57
    TK_LIT_FLOAT (296) 19
    TK_LIT_FALSE (297) 20
    TK_LIT_TRUE (298) 21
    TK_LIT_CHAR (299) 22
    TK_LIT_STRING (300) 23
    TK_IDENTIFICADOR (301) 11 12 28 30 31 44 47 48 49 51 53 54 57 105
    TOKEN_ERRO (302)


Nonterminals, with rules where they appear

    $accept (71)
        on left: 0
    programa (72)
        on left: 1
        on right: 0
    program_list (73)
        on left: 2 3 4
        on right: 1 2 3
    maybe_const (74)
        on left: 5 6
        on right: 30 31 44
    maybe_static (75)
        on left: 7 8
        on right: 24 28 44
    maybe_vector (76)
        on left: 9 10
        on right: 48 57 105
    var (77)
        on left: 11 12
        on right: 25 26
    type (78)
        on left: 13 14 15 16 17
        on right: 24 28 30 31 44
    literal (79)
        on left: 18 19 20 21 22 23
        on right: 46 52 106
    global_var (80)
        on left: 24
        on right: 2
    global_var_list (81)
        on left: 25 26
        on right: 24 25
    func_definition (82)
        on left: 27
        on right: 3
    func_header (83)
        on left: 28
        on right: 27
    func_header_list (84)
        on left: 29 30
        on right: 28
    func_header_list_iterator (85)
        on left: 31 32
        on right: 30 31
    simple_command (86)
        on left: 33 34 35 36 37 38 39 40
        on right: 42
    command_block (87)
        on left: 41
        on right: 27 33 66 67 69 70
    sequence_simple_command (88)
        on left: 42 43
        on right: 41 42
    local_var_declaration (89)
        on left: 44
        on right: 34
    local_var_atribution (90)
        on left: 45 46 47
        on right: 44
    attribution_command (91)
        on left: 48
        on right: 35 69
    io_command (92)
        on left: 49 50
        on right: 36
    id_or_literal (93)
        on left: 51 52
        on right: 50
    call_func_command (94)
        on left: 53 54
        on right: 37 107
    func_parameters_list (95)
        on left: 55 56
        on right: 53 56
    shift_command (96)
        on left: 57
        on right: 38
    shift_operators (97)
        on left: 58 59
        on right: 57
    return_command (98)
        on left: 60 61 62
        on right: 39
    flux_control_command (99)
        on left: 63 64 65
        on right: 40
    conditional_flux_control (100)
        on left: 66
        on right: 63
    maybe_else (101)
        on left: 67 68
        on right: 66
    for_flux_control (102)
        on left: 69
        on right: 64
    while_flux_control (103)
        on left: 70
        on right: 65
    expression (104)
        on left: 71 72
        on right: 10 48 55 56 60 66 69 70 71 108
    exp_log_or (105)
        on left: 73 74
        on right: 71 72 73
    exp_log_and (106)
        on left: 75 76
        on right: 73 74 75
    exp_bit_or (107)
        on left: 77 78
        on right: 75 76 77
    exp_bit_and (108)
        on left: 79 80 81
        on right: 77 78 79 80
    exp_relat (109)
        on left: 82 83 84 85 86
        on right: 79 80 81 82 83 84 85
    exp_sum (110)
        on left: 87 88 89
        on right: 82 83 84 85 86 87 88
    exp_mult (111)
        on left: 90 91 92 93
        on right: 87 88 89 90 91 92
    exp_pow (112)
        on left: 94 95
        on right: 90 91 92 93 94
    unary_exp (113)
        on left: 96 97
        on right: 94 95 96
    unary_op (114)
        on left: 98 99 100 101 102 103 104
        on right: 96
    operand (115)
        on left: 105 106 107 108
        on right: 97


State 0

    0 $accept: . programa $end

    TK_PR_STATIC  shift, and go to state 1

    $end      reduce using rule 4 (program_list)
    $default  reduce using rule 7 (maybe_static)

    programa         go to state 2
    program_list     go to state 3
    maybe_static     go to state 4
    global_var       go to state 5
    func_definition  go to state 6
    func_header      go to state 7


State 1

    8 maybe_static: TK_PR_STATIC .

    $default  reduce using rule 8 (maybe_static)


State 2

    0 $accept: programa . $end

    $end  shift, and go to state 8


State 3

    1 programa: program_list .

    $default  reduce using rule 1 (programa)


State 4

   24 global_var: maybe_static . type global_var_list ';'
   28 func_header: maybe_static . type TK_IDENTIFICADOR '(' func_header_list ')'

    TK_PR_INT     shift, and go to state 9
    TK_PR_FLOAT   shift, and go to state 10
    TK_PR_BOOL    shift, and go to state 11
    TK_PR_CHAR    shift, and go to state 12
    TK_PR_STRING  shift, and go to state 13

    type  go to state 14


State 5

    2 program_list: global_var . program_list

    TK_PR_STATIC  shift, and go to state 1

    $end      reduce using rule 4 (program_list)
    $default  reduce using rule 7 (maybe_static)

    program_list     go to state 15
    maybe_static     go to state 4
    global_var       go to state 5
    func_definition  go to state 6
    func_header      go to state 7


State 6

    3 program_list: func_definition . program_list

    TK_PR_STATIC  shift, and go to state 1

    $end      reduce using rule 4 (program_list)
    $default  reduce using rule 7 (maybe_static)

    program_list     go to state 16
    maybe_static     go to state 4
    global_var       go to state 5
    func_definition  go to state 6
    func_header      go to state 7


State 7

   27 func_definition: func_header . command_block

    '{'  shift, and go to state 17

    command_block  go to state 18


State 8

    0 $accept: programa $end .

    $default  accept


State 9

   13 type: TK_PR_INT .

    $default  reduce using rule 13 (type)


State 10

   14 type: TK_PR_FLOAT .

    $default  reduce using rule 14 (type)


State 11

   16 type: TK_PR_BOOL .

    $default  reduce using rule 16 (type)


State 12

   15 type: TK_PR_CHAR .

    $default  reduce using rule 15 (type)


State 13

   17 type: TK_PR_STRING .

    $default  reduce using rule 17 (type)


State 14

   24 global_var: maybe_static type . global_var_list ';'
   28 func_header: maybe_static type . TK_IDENTIFICADOR '(' func_header_list ')'

    TK_IDENTIFICADOR  shift, and go to state 19

    var              go to state 20
    global_var_list  go to state 21


State 15

    2 program_list: global_var program_list .

    $default  reduce using rule 2 (program_list)


State 16

    3 program_list: func_definition program_list .

    $default  reduce using rule 3 (program_list)


State 17

   41 command_block: '{' . sequence_simple_command '}'

    TK_PR_IF          shift, and go to state 22
    TK_PR_WHILE       shift, and go to state 23
    TK_PR_INPUT       shift, and go to state 24
    TK_PR_OUTPUT      shift, and go to state 25
    TK_PR_RETURN      shift, and go to state 26
    TK_PR_STATIC      shift, and go to state 1
    TK_PR_FOR         shift, and go to state 27
    TK_PR_BREAK       shift, and go to state 28
    TK_PR_CONTINUE    shift, and go to state 29
    TK_IDENTIFICADOR  shift, and go to state 30
    '{'               shift, and go to state 17

    '}'       reduce using rule 43 (sequence_simple_command)
    $default  reduce using rule 7 (maybe_static)

    maybe_static              go to state 31
    simple_command            go to state 32
    command_block             go to state 33
    sequence_simple_command   go to state 34
    local_var_declaration     go to state 35
    attribution_command       go to state 36
    io_command                go to state 37
    call_func_command         go to state 38
    shift_command             go to state 39
    return_command            go to state 40
    flux_control_command      go to state 41
    conditional_flux_control  go to state 42
    for_flux_control          go to state 43
    while_flux_control        go to state 44


State 18

   27 func_definition: func_header command_block .

    $default  reduce using rule 27 (func_definition)


State 19

   11 var: TK_IDENTIFICADOR . '[' TK_LIT_INT ']'
   12    | TK_IDENTIFICADOR .
   28 func_header: maybe_static type TK_IDENTIFICADOR . '(' func_header_list ')'

    '['  shift, and go to state 45
    '('  shift, and go to state 46

    $default  reduce using rule 12 (var)


State 20

   25 global_var_list: var . ',' global_var_list
   26                | var .

    ','  shift, and go to state 47

    $default  reduce using rule 26 (global_var_list)


State 21

   24 global_var: maybe_static type global_var_list . ';'

    ';'  shift, and go to state 48


State 22

   66 conditional_flux_control: TK_PR_IF . '(' expression ')' command_block maybe_else

    '('  shift, and go to state 49


State 23

   70 while_flux_control: TK_PR_WHILE . '(' expression ')' TK_PR_DO command_block ';'

    '('  shift, and go to state 50


State 24

   49 io_command: TK_PR_INPUT . TK_IDENTIFICADOR

    TK_IDENTIFICADOR  shift, and go to state 51


State 25

   50 io_command: TK_PR_OUTPUT . id_or_literal

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 58

    literal        go to state 59
    id_or_literal  go to state 60


State 26

   60 return_command: TK_PR_RETURN . expression

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    expression         go to state 72
    exp_log_or         go to state 73
    exp_log_and        go to state 74
    exp_bit_or         go to state 75
    exp_bit_and        go to state 76
    exp_relat          go to state 77
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 27

   69 for_flux_control: TK_PR_FOR . '(' attribution_command ':' expression ':' attribution_command ')' command_block ';'

    '('  shift, and go to state 84


State 28

   61 return_command: TK_PR_BREAK .

    $default  reduce using rule 61 (return_command)


State 29

   62 return_command: TK_PR_CONTINUE .

    $default  reduce using rule 62 (return_command)


State 30

   48 attribution_command: TK_IDENTIFICADOR . maybe_vector '=' expression
   53 call_func_command: TK_IDENTIFICADOR . '(' func_parameters_list ')'
   54                  | TK_IDENTIFICADOR . '(' ')'
   57 shift_command: TK_IDENTIFICADOR . maybe_vector shift_operators TK_LIT_INT

    '['  shift, and go to state 85
    '('  shift, and go to state 86

    $default  reduce using rule 9 (maybe_vector)

    maybe_vector  go to state 87


State 31

   44 local_var_declaration: maybe_static . maybe_const type TK_IDENTIFICADOR local_var_atribution

    TK_PR_CONST  shift, and go to state 88

    $default  reduce using rule 5 (maybe_const)

    maybe_const  go to state 89


State 32

   42 sequence_simple_command: simple_command . ';' sequence_simple_command

    ';'  shift, and go to state 90


State 33

   33 simple_command: command_block .

    $default  reduce using rule 33 (simple_command)


State 34

   41 command_block: '{' sequence_simple_command . '}'

    '}'  shift, and go to state 91


State 35

   34 simple_command: local_var_declaration .

    $default  reduce using rule 34 (simple_command)


State 36

   35 simple_command: attribution_command .

    $default  reduce using rule 35 (simple_command)


State 37

   36 simple_command: io_command .

    $default  reduce using rule 36 (simple_command)


State 38

   37 simple_command: call_func_command .

    $default  reduce using rule 37 (simple_command)


State 39

   38 simple_command: shift_command .

    $default  reduce using rule 38 (simple_command)


State 40

   39 simple_command: return_command .

    $default  reduce using rule 39 (simple_command)


State 41

   40 simple_command: flux_control_command .

    $default  reduce using rule 40 (simple_command)


State 42

   63 flux_control_command: conditional_flux_control .

    $default  reduce using rule 63 (flux_control_command)


State 43

   64 flux_control_command: for_flux_control .

    $default  reduce using rule 64 (flux_control_command)


State 44

   65 flux_control_command: while_flux_control .

    $default  reduce using rule 65 (flux_control_command)


State 45

   11 var: TK_IDENTIFICADOR '[' . TK_LIT_INT ']'

    TK_LIT_INT  shift, and go to state 92


State 46

   28 func_header: maybe_static type TK_IDENTIFICADOR '(' . func_header_list ')'

    TK_PR_CONST  shift, and go to state 88

    ')'       reduce using rule 29 (func_header_list)
    $default  reduce using rule 5 (maybe_const)

    maybe_const       go to state 93
    func_header_list  go to state 94


State 47

   25 global_var_list: var ',' . global_var_list

    TK_IDENTIFICADOR  shift, and go to state 95

    var              go to state 20
    global_var_list  go to state 96


State 48

   24 global_var: maybe_static type global_var_list ';' .

    $default  reduce using rule 24 (global_var)


State 49

   66 conditional_flux_control: TK_PR_IF '(' . expression ')' command_block maybe_else

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    expression         go to state 97
    exp_log_or         go to state 73
    exp_log_and        go to state 74
    exp_bit_or         go to state 75
    exp_bit_and        go to state 76
    exp_relat          go to state 77
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 50

   70 while_flux_control: TK_PR_WHILE '(' . expression ')' TK_PR_DO command_block ';'

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    expression         go to state 98
    exp_log_or         go to state 73
    exp_log_and        go to state 74
    exp_bit_or         go to state 75
    exp_bit_and        go to state 76
    exp_relat          go to state 77
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 51

   49 io_command: TK_PR_INPUT TK_IDENTIFICADOR .

    $default  reduce using rule 49 (io_command)


State 52

   18 literal: TK_LIT_INT .

    $default  reduce using rule 18 (literal)


State 53

   19 literal: TK_LIT_FLOAT .

    $default  reduce using rule 19 (literal)


State 54

   20 literal: TK_LIT_FALSE .

    $default  reduce using rule 20 (literal)


State 55

   21 literal: TK_LIT_TRUE .

    $default  reduce using rule 21 (literal)


State 56

   22 literal: TK_LIT_CHAR .

    $default  reduce using rule 22 (literal)


State 57

   23 literal: TK_LIT_STRING .

    $default  reduce using rule 23 (literal)


State 58

   51 id_or_literal: TK_IDENTIFICADOR .

    $default  reduce using rule 51 (id_or_literal)


State 59

   52 id_or_literal: literal .

    $default  reduce using rule 52 (id_or_literal)


State 60

   50 io_command: TK_PR_OUTPUT id_or_literal .

    $default  reduce using rule 50 (io_command)


State 61

   53 call_func_command: TK_IDENTIFICADOR . '(' func_parameters_list ')'
   54                  | TK_IDENTIFICADOR . '(' ')'
  105 operand: TK_IDENTIFICADOR . maybe_vector

    '['  shift, and go to state 85
    '('  shift, and go to state 86

    $default  reduce using rule 9 (maybe_vector)

    maybe_vector  go to state 99


State 62

  108 operand: '(' . expression ')'

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    expression         go to state 100
    exp_log_or         go to state 73
    exp_log_and        go to state 74
    exp_bit_or         go to state 75
    exp_bit_and        go to state 76
    exp_relat          go to state 77
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 63

  101 unary_op: '&' .

    $default  reduce using rule 101 (unary_op)


State 64

   98 unary_op: '+' .

    $default  reduce using rule 98 (unary_op)


State 65

   99 unary_op: '-' .

    $default  reduce using rule 99 (unary_op)


State 66

  102 unary_op: '*' .

    $default  reduce using rule 102 (unary_op)


State 67

  100 unary_op: '!' .

    $default  reduce using rule 100 (unary_op)


State 68

  103 unary_op: '?' .

    $default  reduce using rule 103 (unary_op)


State 69

  104 unary_op: '#' .

    $default  reduce using rule 104 (unary_op)


State 70

  106 operand: literal .

    $default  reduce using rule 106 (operand)


State 71

  107 operand: call_func_command .

    $default  reduce using rule 107 (operand)


State 72

   60 return_command: TK_PR_RETURN expression .
   71 expression: expression . TK_OC_OR exp_log_or

    TK_OC_OR  shift, and go to state 101

    $default  reduce using rule 60 (return_command)


State 73

   72 expression: exp_log_or .
   73 exp_log_or: exp_log_or . TK_OC_AND exp_log_and

    TK_OC_AND  shift, and go to state 102

    $default  reduce using rule 72 (expression)


State 74

   74 exp_log_or: exp_log_and .
   75 exp_log_and: exp_log_and . '|' exp_bit_or

    '|'  shift, and go to state 103

    $default  reduce using rule 74 (exp_log_or)


State 75

   76 exp_log_and: exp_bit_or .
   77 exp_bit_or: exp_bit_or . '&' exp_bit_and

    '&'  shift, and go to state 104

    $default  reduce using rule 76 (exp_log_and)


State 76

   78 exp_bit_or: exp_bit_and .
   79 exp_bit_and: exp_bit_and . TK_OC_EQ exp_relat
   80            | exp_bit_and . TK_OC_NE exp_relat

    TK_OC_EQ  shift, and go to state 105
    TK_OC_NE  shift, and go to state 106

    $default  reduce using rule 78 (exp_bit_or)


State 77

   81 exp_bit_and: exp_relat .
   82 exp_relat: exp_relat . TK_OC_LE exp_sum
   83          | exp_relat . TK_OC_GE exp_sum
   84          | exp_relat . '<' exp_sum
   85          | exp_relat . '>' exp_sum

    TK_OC_LE  shift, and go to state 107
    TK_OC_GE  shift, and go to state 108
    '<'       shift, and go to state 109
    '>'       shift, and go to state 110

    $default  reduce using rule 81 (exp_bit_and)


State 78

   86 exp_relat: exp_sum .
   87 exp_sum: exp_sum . '+' exp_mult
   88        | exp_sum . '-' exp_mult

    '+'  shift, and go to state 111
    '-'  shift, and go to state 112

    $default  reduce using rule 86 (exp_relat)


State 79

   89 exp_sum: exp_mult .
   90 exp_mult: exp_mult . '*' exp_pow
   91         | exp_mult . '/' exp_pow
   92         | exp_mult . '%' exp_pow

    '*'  shift, and go to state 113
    '/'  shift, and go to state 114
    '%'  shift, and go to state 115

    $default  reduce using rule 89 (exp_sum)


State 80

   93 exp_mult: exp_pow .
   94 exp_pow: exp_pow . '^' unary_exp

    '^'  shift, and go to state 116

    $default  reduce using rule 93 (exp_mult)


State 81

   95 exp_pow: unary_exp .

    $default  reduce using rule 95 (exp_pow)


State 82

   96 unary_exp: unary_op . unary_exp

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    unary_exp          go to state 117
    unary_op           go to state 82
    operand            go to state 83


State 83

   97 unary_exp: operand .

    $default  reduce using rule 97 (unary_exp)


State 84

   69 for_flux_control: TK_PR_FOR '(' . attribution_command ':' expression ':' attribution_command ')' command_block ';'

    TK_IDENTIFICADOR  shift, and go to state 118

    attribution_command  go to state 119


State 85

   10 maybe_vector: '[' . expression ']'

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    expression         go to state 120
    exp_log_or         go to state 73
    exp_log_and        go to state 74
    exp_bit_or         go to state 75
    exp_bit_and        go to state 76
    exp_relat          go to state 77
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 86

   53 call_func_command: TK_IDENTIFICADOR '(' . func_parameters_list ')'
   54                  | TK_IDENTIFICADOR '(' . ')'

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    ')'               shift, and go to state 121
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal               go to state 70
    call_func_command     go to state 71
    func_parameters_list  go to state 122
    expression            go to state 123
    exp_log_or            go to state 73
    exp_log_and           go to state 74
    exp_bit_or            go to state 75
    exp_bit_and           go to state 76
    exp_relat             go to state 77
    exp_sum               go to state 78
    exp_mult              go to state 79
    exp_pow               go to state 80
    unary_exp             go to state 81
    unary_op              go to state 82
    operand               go to state 83


State 87

   48 attribution_command: TK_IDENTIFICADOR maybe_vector . '=' expression
   57 shift_command: TK_IDENTIFICADOR maybe_vector . shift_operators TK_LIT_INT

    TK_OC_SL  shift, and go to state 124
    TK_OC_SR  shift, and go to state 125
    '='       shift, and go to state 126

    shift_operators  go to state 127


State 88

    6 maybe_const: TK_PR_CONST .

    $default  reduce using rule 6 (maybe_const)


State 89

   44 local_var_declaration: maybe_static maybe_const . type TK_IDENTIFICADOR local_var_atribution

    TK_PR_INT     shift, and go to state 9
    TK_PR_FLOAT   shift, and go to state 10
    TK_PR_BOOL    shift, and go to state 11
    TK_PR_CHAR    shift, and go to state 12
    TK_PR_STRING  shift, and go to state 13

    type  go to state 128


State 90

   42 sequence_simple_command: simple_command ';' . sequence_simple_command

    TK_PR_IF          shift, and go to state 22
    TK_PR_WHILE       shift, and go to state 23
    TK_PR_INPUT       shift, and go to state 24
    TK_PR_OUTPUT      shift, and go to state 25
    TK_PR_RETURN      shift, and go to state 26
    TK_PR_STATIC      shift, and go to state 1
    TK_PR_FOR         shift, and go to state 27
    TK_PR_BREAK       shift, and go to state 28
    TK_PR_CONTINUE    shift, and go to state 29
    TK_IDENTIFICADOR  shift, and go to state 30
    '{'               shift, and go to state 17

    '}'       reduce using rule 43 (sequence_simple_command)
    $default  reduce using rule 7 (maybe_static)

    maybe_static              go to state 31
    simple_command            go to state 32
    command_block             go to state 33
    sequence_simple_command   go to state 129
    local_var_declaration     go to state 35
    attribution_command       go to state 36
    io_command                go to state 37
    call_func_command         go to state 38
    shift_command             go to state 39
    return_command            go to state 40
    flux_control_command      go to state 41
    conditional_flux_control  go to state 42
    for_flux_control          go to state 43
    while_flux_control        go to state 44


State 91

   41 command_block: '{' sequence_simple_command '}' .

    $default  reduce using rule 41 (command_block)


State 92

   11 var: TK_IDENTIFICADOR '[' TK_LIT_INT . ']'

    ']'  shift, and go to state 130


State 93

   30 func_header_list: maybe_const . type TK_IDENTIFICADOR func_header_list_iterator

    TK_PR_INT     shift, and go to state 9
    TK_PR_FLOAT   shift, and go to state 10
    TK_PR_BOOL    shift, and go to state 11
    TK_PR_CHAR    shift, and go to state 12
    TK_PR_STRING  shift, and go to state 13

    type  go to state 131


State 94

   28 func_header: maybe_static type TK_IDENTIFICADOR '(' func_header_list . ')'

    ')'  shift, and go to state 132


State 95

   11 var: TK_IDENTIFICADOR . '[' TK_LIT_INT ']'
   12    | TK_IDENTIFICADOR .

    '['  shift, and go to state 45

    $default  reduce using rule 12 (var)


State 96

   25 global_var_list: var ',' global_var_list .

    $default  reduce using rule 25 (global_var_list)


State 97

   66 conditional_flux_control: TK_PR_IF '(' expression . ')' command_block maybe_else
   71 expression: expression . TK_OC_OR exp_log_or

    TK_OC_OR  shift, and go to state 101
    ')'       shift, and go to state 133


State 98

   70 while_flux_control: TK_PR_WHILE '(' expression . ')' TK_PR_DO command_block ';'
   71 expression: expression . TK_OC_OR exp_log_or

    TK_OC_OR  shift, and go to state 101
    ')'       shift, and go to state 134


State 99

  105 operand: TK_IDENTIFICADOR maybe_vector .

    $default  reduce using rule 105 (operand)


State 100

   71 expression: expression . TK_OC_OR exp_log_or
  108 operand: '(' expression . ')'

    TK_OC_OR  shift, and go to state 101
    ')'       shift, and go to state 135


State 101

   71 expression: expression TK_OC_OR . exp_log_or

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_log_or         go to state 136
    exp_log_and        go to state 74
    exp_bit_or         go to state 75
    exp_bit_and        go to state 76
    exp_relat          go to state 77
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 102

   73 exp_log_or: exp_log_or TK_OC_AND . exp_log_and

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_log_and        go to state 137
    exp_bit_or         go to state 75
    exp_bit_and        go to state 76
    exp_relat          go to state 77
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 103

   75 exp_log_and: exp_log_and '|' . exp_bit_or

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_bit_or         go to state 138
    exp_bit_and        go to state 76
    exp_relat          go to state 77
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 104

   77 exp_bit_or: exp_bit_or '&' . exp_bit_and

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_bit_and        go to state 139
    exp_relat          go to state 77
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 105

   79 exp_bit_and: exp_bit_and TK_OC_EQ . exp_relat

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_relat          go to state 140
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 106

   80 exp_bit_and: exp_bit_and TK_OC_NE . exp_relat

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_relat          go to state 141
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 107

   82 exp_relat: exp_relat TK_OC_LE . exp_sum

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_sum            go to state 142
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 108

   83 exp_relat: exp_relat TK_OC_GE . exp_sum

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_sum            go to state 143
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 109

   84 exp_relat: exp_relat '<' . exp_sum

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_sum            go to state 144
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 110

   85 exp_relat: exp_relat '>' . exp_sum

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_sum            go to state 145
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 111

   87 exp_sum: exp_sum '+' . exp_mult

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_mult           go to state 146
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 112

   88 exp_sum: exp_sum '-' . exp_mult

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_mult           go to state 147
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 113

   90 exp_mult: exp_mult '*' . exp_pow

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_pow            go to state 148
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 114

   91 exp_mult: exp_mult '/' . exp_pow

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_pow            go to state 149
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 115

   92 exp_mult: exp_mult '%' . exp_pow

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    exp_pow            go to state 150
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 116

   94 exp_pow: exp_pow '^' . unary_exp

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    unary_exp          go to state 151
    unary_op           go to state 82
    operand            go to state 83


State 117

   96 unary_exp: unary_op unary_exp .

    $default  reduce using rule 96 (unary_exp)


State 118

   48 attribution_command: TK_IDENTIFICADOR . maybe_vector '=' expression

    '['  shift, and go to state 85

    $default  reduce using rule 9 (maybe_vector)

    maybe_vector  go to state 152


State 119

   69 for_flux_control: TK_PR_FOR '(' attribution_command . ':' expression ':' attribution_command ')' command_block ';'

    ':'  shift, and go to state 153


State 120

   10 maybe_vector: '[' expression . ']'
   71 expression: expression . TK_OC_OR exp_log_or

    TK_OC_OR  shift, and go to state 101
    ']'       shift, and go to state 154


State 121

   54 call_func_command: TK_IDENTIFICADOR '(' ')' .

    $default  reduce using rule 54 (call_func_command)


State 122

   53 call_func_command: TK_IDENTIFICADOR '(' func_parameters_list . ')'
   56 func_parameters_list: func_parameters_list . ',' expression

    ','  shift, and go to state 155
    ')'  shift, and go to state 156


State 123

   55 func_parameters_list: expression .
   71 expression: expression . TK_OC_OR exp_log_or

    TK_OC_OR  shift, and go to state 101

    $default  reduce using rule 55 (func_parameters_list)


State 124

   58 shift_operators: TK_OC_SL .

    $default  reduce using rule 58 (shift_operators)


State 125

   59 shift_operators: TK_OC_SR .

    $default  reduce using rule 59 (shift_operators)


State 126

   48 attribution_command: TK_IDENTIFICADOR maybe_vector '=' . expression

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    expression         go to state 157
    exp_log_or         go to state 73
    exp_log_and        go to state 74
    exp_bit_or         go to state 75
    exp_bit_and        go to state 76
    exp_relat          go to state 77
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 127

   57 shift_command: TK_IDENTIFICADOR maybe_vector shift_operators . TK_LIT_INT

    TK_LIT_INT  shift, and go to state 158


State 128

   44 local_var_declaration: maybe_static maybe_const type . TK_IDENTIFICADOR local_var_atribution

    TK_IDENTIFICADOR  shift, and go to state 159


State 129

   42 sequence_simple_command: simple_command ';' sequence_simple_command .

    $default  reduce using rule 42 (sequence_simple_command)


State 130

   11 var: TK_IDENTIFICADOR '[' TK_LIT_INT ']' .

    $default  reduce using rule 11 (var)


State 131

   30 func_header_list: maybe_const type . TK_IDENTIFICADOR func_header_list_iterator

    TK_IDENTIFICADOR  shift, and go to state 160


State 132

   28 func_header: maybe_static type TK_IDENTIFICADOR '(' func_header_list ')' .

    $default  reduce using rule 28 (func_header)


State 133

   66 conditional_flux_control: TK_PR_IF '(' expression ')' . command_block maybe_else

    '{'  shift, and go to state 17

    command_block  go to state 161


State 134

   70 while_flux_control: TK_PR_WHILE '(' expression ')' . TK_PR_DO command_block ';'

    TK_PR_DO  shift, and go to state 162


State 135

  108 operand: '(' expression ')' .

    $default  reduce using rule 108 (operand)


State 136

   71 expression: expression TK_OC_OR exp_log_or .
   73 exp_log_or: exp_log_or . TK_OC_AND exp_log_and

    TK_OC_AND  shift, and go to state 102

    $default  reduce using rule 71 (expression)


State 137

   73 exp_log_or: exp_log_or TK_OC_AND exp_log_and .
   75 exp_log_and: exp_log_and . '|' exp_bit_or

    '|'  shift, and go to state 103

    $default  reduce using rule 73 (exp_log_or)


State 138

   75 exp_log_and: exp_log_and '|' exp_bit_or .
   77 exp_bit_or: exp_bit_or . '&' exp_bit_and

    '&'  shift, and go to state 104

    $default  reduce using rule 75 (exp_log_and)


State 139

   77 exp_bit_or: exp_bit_or '&' exp_bit_and .
   79 exp_bit_and: exp_bit_and . TK_OC_EQ exp_relat
   80            | exp_bit_and . TK_OC_NE exp_relat

    TK_OC_EQ  shift, and go to state 105
    TK_OC_NE  shift, and go to state 106

    $default  reduce using rule 77 (exp_bit_or)


State 140

   79 exp_bit_and: exp_bit_and TK_OC_EQ exp_relat .
   82 exp_relat: exp_relat . TK_OC_LE exp_sum
   83          | exp_relat . TK_OC_GE exp_sum
   84          | exp_relat . '<' exp_sum
   85          | exp_relat . '>' exp_sum

    TK_OC_LE  shift, and go to state 107
    TK_OC_GE  shift, and go to state 108
    '<'       shift, and go to state 109
    '>'       shift, and go to state 110

    $default  reduce using rule 79 (exp_bit_and)


State 141

   80 exp_bit_and: exp_bit_and TK_OC_NE exp_relat .
   82 exp_relat: exp_relat . TK_OC_LE exp_sum
   83          | exp_relat . TK_OC_GE exp_sum
   84          | exp_relat . '<' exp_sum
   85          | exp_relat . '>' exp_sum

    TK_OC_LE  shift, and go to state 107
    TK_OC_GE  shift, and go to state 108
    '<'       shift, and go to state 109
    '>'       shift, and go to state 110

    $default  reduce using rule 80 (exp_bit_and)


State 142

   82 exp_relat: exp_relat TK_OC_LE exp_sum .
   87 exp_sum: exp_sum . '+' exp_mult
   88        | exp_sum . '-' exp_mult

    '+'  shift, and go to state 111
    '-'  shift, and go to state 112

    $default  reduce using rule 82 (exp_relat)


State 143

   83 exp_relat: exp_relat TK_OC_GE exp_sum .
   87 exp_sum: exp_sum . '+' exp_mult
   88        | exp_sum . '-' exp_mult

    '+'  shift, and go to state 111
    '-'  shift, and go to state 112

    $default  reduce using rule 83 (exp_relat)


State 144

   84 exp_relat: exp_relat '<' exp_sum .
   87 exp_sum: exp_sum . '+' exp_mult
   88        | exp_sum . '-' exp_mult

    '+'  shift, and go to state 111
    '-'  shift, and go to state 112

    $default  reduce using rule 84 (exp_relat)


State 145

   85 exp_relat: exp_relat '>' exp_sum .
   87 exp_sum: exp_sum . '+' exp_mult
   88        | exp_sum . '-' exp_mult

    '+'  shift, and go to state 111
    '-'  shift, and go to state 112

    $default  reduce using rule 85 (exp_relat)


State 146

   87 exp_sum: exp_sum '+' exp_mult .
   90 exp_mult: exp_mult . '*' exp_pow
   91         | exp_mult . '/' exp_pow
   92         | exp_mult . '%' exp_pow

    '*'  shift, and go to state 113
    '/'  shift, and go to state 114
    '%'  shift, and go to state 115

    $default  reduce using rule 87 (exp_sum)


State 147

   88 exp_sum: exp_sum '-' exp_mult .
   90 exp_mult: exp_mult . '*' exp_pow
   91         | exp_mult . '/' exp_pow
   92         | exp_mult . '%' exp_pow

    '*'  shift, and go to state 113
    '/'  shift, and go to state 114
    '%'  shift, and go to state 115

    $default  reduce using rule 88 (exp_sum)


State 148

   90 exp_mult: exp_mult '*' exp_pow .
   94 exp_pow: exp_pow . '^' unary_exp

    '^'  shift, and go to state 116

    $default  reduce using rule 90 (exp_mult)


State 149

   91 exp_mult: exp_mult '/' exp_pow .
   94 exp_pow: exp_pow . '^' unary_exp

    '^'  shift, and go to state 116

    $default  reduce using rule 91 (exp_mult)


State 150

   92 exp_mult: exp_mult '%' exp_pow .
   94 exp_pow: exp_pow . '^' unary_exp

    '^'  shift, and go to state 116

    $default  reduce using rule 92 (exp_mult)


State 151

   94 exp_pow: exp_pow '^' unary_exp .

    $default  reduce using rule 94 (exp_pow)


State 152

   48 attribution_command: TK_IDENTIFICADOR maybe_vector . '=' expression

    '='  shift, and go to state 126


State 153

   69 for_flux_control: TK_PR_FOR '(' attribution_command ':' . expression ':' attribution_command ')' command_block ';'

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    expression         go to state 163
    exp_log_or         go to state 73
    exp_log_and        go to state 74
    exp_bit_or         go to state 75
    exp_bit_and        go to state 76
    exp_relat          go to state 77
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 154

   10 maybe_vector: '[' expression ']' .

    $default  reduce using rule 10 (maybe_vector)


State 155

   56 func_parameters_list: func_parameters_list ',' . expression

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 61
    '('               shift, and go to state 62
    '&'               shift, and go to state 63
    '+'               shift, and go to state 64
    '-'               shift, and go to state 65
    '*'               shift, and go to state 66
    '!'               shift, and go to state 67
    '?'               shift, and go to state 68
    '#'               shift, and go to state 69

    literal            go to state 70
    call_func_command  go to state 71
    expression         go to state 164
    exp_log_or         go to state 73
    exp_log_and        go to state 74
    exp_bit_or         go to state 75
    exp_bit_and        go to state 76
    exp_relat          go to state 77
    exp_sum            go to state 78
    exp_mult           go to state 79
    exp_pow            go to state 80
    unary_exp          go to state 81
    unary_op           go to state 82
    operand            go to state 83


State 156

   53 call_func_command: TK_IDENTIFICADOR '(' func_parameters_list ')' .

    $default  reduce using rule 53 (call_func_command)


State 157

   48 attribution_command: TK_IDENTIFICADOR maybe_vector '=' expression .
   71 expression: expression . TK_OC_OR exp_log_or

    TK_OC_OR  shift, and go to state 101

    $default  reduce using rule 48 (attribution_command)


State 158

   57 shift_command: TK_IDENTIFICADOR maybe_vector shift_operators TK_LIT_INT .

    $default  reduce using rule 57 (shift_command)


State 159

   44 local_var_declaration: maybe_static maybe_const type TK_IDENTIFICADOR . local_var_atribution

    TK_OC_LE  shift, and go to state 165

    $default  reduce using rule 45 (local_var_atribution)

    local_var_atribution  go to state 166


State 160

   30 func_header_list: maybe_const type TK_IDENTIFICADOR . func_header_list_iterator

    ','  shift, and go to state 167

    $default  reduce using rule 32 (func_header_list_iterator)

    func_header_list_iterator  go to state 168


State 161

   66 conditional_flux_control: TK_PR_IF '(' expression ')' command_block . maybe_else

    TK_PR_ELSE  shift, and go to state 169

    $default  reduce using rule 68 (maybe_else)

    maybe_else  go to state 170


State 162

   70 while_flux_control: TK_PR_WHILE '(' expression ')' TK_PR_DO . command_block ';'

    '{'  shift, and go to state 17

    command_block  go to state 171


State 163

   69 for_flux_control: TK_PR_FOR '(' attribution_command ':' expression . ':' attribution_command ')' command_block ';'
   71 expression: expression . TK_OC_OR exp_log_or

    TK_OC_OR  shift, and go to state 101
    ':'       shift, and go to state 172


State 164

   56 func_parameters_list: func_parameters_list ',' expression .
   71 expression: expression . TK_OC_OR exp_log_or

    TK_OC_OR  shift, and go to state 101

    $default  reduce using rule 56 (func_parameters_list)


State 165

   46 local_var_atribution: TK_OC_LE . literal
   47                     | TK_OC_LE . TK_IDENTIFICADOR

    TK_LIT_INT        shift, and go to state 52
    TK_LIT_FLOAT      shift, and go to state 53
    TK_LIT_FALSE      shift, and go to state 54
    TK_LIT_TRUE       shift, and go to state 55
    TK_LIT_CHAR       shift, and go to state 56
    TK_LIT_STRING     shift, and go to state 57
    TK_IDENTIFICADOR  shift, and go to state 173

    literal  go to state 174


State 166

   44 local_var_declaration: maybe_static maybe_const type TK_IDENTIFICADOR local_var_atribution .

    $default  reduce using rule 44 (local_var_declaration)


State 167

   31 func_header_list_iterator: ',' . maybe_const type TK_IDENTIFICADOR func_header_list_iterator

    TK_PR_CONST  shift, and go to state 88

    $default  reduce using rule 5 (maybe_const)

    maybe_const  go to state 175


State 168

   30 func_header_list: maybe_const type TK_IDENTIFICADOR func_header_list_iterator .

    $default  reduce using rule 30 (func_header_list)


State 169

   67 maybe_else: TK_PR_ELSE . command_block

    '{'  shift, and go to state 17

    command_block  go to state 176


State 170

   66 conditional_flux_control: TK_PR_IF '(' expression ')' command_block maybe_else .

    $default  reduce using rule 66 (conditional_flux_control)


State 171

   70 while_flux_control: TK_PR_WHILE '(' expression ')' TK_PR_DO command_block . ';'

    ';'  shift, and go to state 177


State 172

   69 for_flux_control: TK_PR_FOR '(' attribution_command ':' expression ':' . attribution_command ')' command_block ';'

    TK_IDENTIFICADOR  shift, and go to state 118

    attribution_command  go to state 178


State 173

   47 local_var_atribution: TK_OC_LE TK_IDENTIFICADOR .

    $default  reduce using rule 47 (local_var_atribution)


State 174

   46 local_var_atribution: TK_OC_LE literal .

    $default  reduce using rule 46 (local_var_atribution)


State 175

   31 func_header_list_iterator: ',' maybe_const . type TK_IDENTIFICADOR func_header_list_iterator

    TK_PR_INT     shift, and go to state 9
    TK_PR_FLOAT   shift, and go to state 10
    TK_PR_BOOL    shift, and go to state 11
    TK_PR_CHAR    shift, and go to state 12
    TK_PR_STRING  shift, and go to state 13

    type  go to state 179


State 176

   67 maybe_else: TK_PR_ELSE command_block .

    $default  reduce using rule 67 (maybe_else)


State 177

   70 while_flux_control: TK_PR_WHILE '(' expression ')' TK_PR_DO command_block ';' .

    $default  reduce using rule 70 (while_flux_control)


State 178

   69 for_flux_control: TK_PR_FOR '(' attribution_command ':' expression ':' attribution_command . ')' command_block ';'

    ')'  shift, and go to state 180


State 179

   31 func_header_list_iterator: ',' maybe_const type . TK_IDENTIFICADOR func_header_list_iterator

    TK_IDENTIFICADOR  shift, and go to state 181


State 180

   69 for_flux_control: TK_PR_FOR '(' attribution_command ':' expression ':' attribution_command ')' . command_block ';'

    '{'  shift, and go to state 17

    command_block  go to state 182


State 181

   31 func_header_list_iterator: ',' maybe_const type TK_IDENTIFICADOR . func_header_list_iterator

    ','  shift, and go to state 167

    $default  reduce using rule 32 (func_header_list_iterator)

    func_header_list_iterator  go to state 183


State 182

   69 for_flux_control: TK_PR_FOR '(' attribution_command ':' expression ':' attribution_command ')' command_block . ';'

    ';'  shift, and go to state 184


State 183

   31 func_header_list_iterator: ',' maybe_const type TK_IDENTIFICADOR func_header_list_iterator .

    $default  reduce using rule 31 (func_header_list_iterator)


State 184

   69 for_flux_control: TK_PR_FOR '(' attribution_command ':' expression ':' attribution_command ')' command_block ';' .

    $default  reduce using rule 69 (for_flux_control)
